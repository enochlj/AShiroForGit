Shiro 集成 Spring
1. 加入 Spring 的开发环境.
2. 加入 SpringMVC 的配置.

3. Spring 集成 Shiro. 
1). 打开 shiro\shiro-root-1.2.2\samples\spring\src\main\webapp\WEB-INF\applicationContext.xml 文件. 
2). 加入 ehcache-core-2.4.3.jar
3). 自定义的 Realm 需要继承 org.apache.shiro.realm.AuthorizingRealm 类
①. 其中 doGetAuthorizationInfo 方法用于授权。 doGetAuthenticationInfo 方法用于认证. 
4). 在 web.xml 文件中配置 Shiro 的 Filter

<filter>
    <filter-name>shiroFilter</filter-name>
    <filter-class>org.springframework.web.filter.DelegatingFilterProxy</filter-class>
    <init-param>
        <param-name>targetFilterLifecycle</param-name>
        <param-value>true</param-value>
    </init-param>
</filter>

<filter-mapping>
    <filter-name>shiroFilter</filter-name>
    <url-pattern>/*</url-pattern>
</filter-mapping>

4. 登陆的流程:
1). 需要发送请求到 SpringMVC 的 Handler 或 Struts2 的 Action 或 Servlet. 而不是直接到 Shiro 的某一个组件.
2). 在 Handler 的方法中完成:
①. 获取前端输入的用户名和密码
②. 其他操作来自于 QuickStart 中的代码. 

3). 完成 realm 的 doGetAuthenticationInfo 方法
4). 还可以做得: 密码的盐值加密. 根据用户在数据表中的情况抛出对应的异常. 

5). 密码的加密: 可以为当前的 Realm 配置一个 CredentialsMatcher 类型的 bean. 
6). 加盐值: 在 doGetAuthenticationInfo 方法构建返回值对象时使用如下构造器即可. 
SimpleAuthenticationInfo(Object principal, Object hashedCredentials, 
	ByteSource credentialsSalt, String realmName)
其中 credentialsSalt 参数可以调用 ByteSource.Util.bytes(salt); 工具方法来生成
7). 如何计算盐值加密后的密码呢 ?
new SimpleHash(hashAlgorithmName, credentials, salt, hashIterations); 

8). 配置受保护的资源: 使用 shiro 内置的过滤器.

9). 注意: URL 权限采取第一次匹配优先的方式

10). 使用 shiro 的标签来隐藏受保护的资源

11). 使用 shiro 的注解来进行权限的保护. 